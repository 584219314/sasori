<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">


	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}">
		</property>
		<property name="url" value="${jdbc.url}">
		</property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- mybatis文件配置，扫描所有mapper.xml文件 -->
	<!-- 配置mybatisSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:mybatis.xml" /> -->
		<property name="mapperLocations" value="classpath*:com/sasori/dao/*Mapper.xml" />
	</bean>

	<!-- 配置SqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<!-- 配置mybatis mapper接口，扫描所有dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sasori.dao" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>

	<!-- 事务管理 通知 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 <tx:method name="insert*" 
		propagation="REQUIRED" rollback-for="java.lang.Throwable" /> <tx:method name="update*" 
		propagation="REQUIRED" rollback-for="java.lang.Throwable" /> <tx:method name="delete*" 
		propagation="REQUIRED" rollback-for="java.lang.Throwable" /> select,count开头的方法,开启只读,提高数据库访问性能 
		<tx:method name="select*" read-only="true" /> <tx:method name="count*" read-only="true" 
		/> 对其他方法 使用默认的事务管理 <tx:method name="*" /> </tx:attributes> </tx:advice> -->

	<!-- <aop:config> <aop:pointcut id="serviceMethods" expression="execution(* 
		com.charlie.service..*(..))" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" 
		/> </aop:config> -->

	<!-- 配置使Spring采用CGLIB代理 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->

	<!-- 对dataSource 数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 使用annotation注解方式配置事务,启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置编程式事务支持 -->
	<bean id ="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
       <property name="transactionManager" ref="transactionManager"/>
	</bean>
</beans>